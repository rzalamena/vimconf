The cljstyle formatter knows how to format Clojure.
If you aren't familiar with basic codefmt usage yet, see main.vroom first.

We'll set up codefmt and configure the vroom environment, then jump into some
examples.

  :source $VROOMDIR/setupvroom.vim

  :let g:repeat_calls = []
  :function FakeRepeat(...)<CR>
  |  call add(g:repeat_calls, a:000)<CR>
  :endfunction
  :call maktaba#test#Override('repeat#set', 'FakeRepeat')

  :call codefmt#SetWhetherToPerformIsAvailableChecksForTesting(0)

The cljstyle formatter expects the cljstyle executable to be installed on your
system.

  :FormatCode cljstyle
  ! cljstyle .*
  $ no-op

The name or path of the cljstyle executable can be configured via the
cljstyle_executable flag if the default of "cljstyle" doesn't work.

  :Glaive codefmt cljstyle_executable='/usr/local/bin/cljstyle'
  :FormatCode cljstyle
  ! /usr/local/bin/cljstyle .*
  $ no-op
  :Glaive codefmt cljstyle_executable='cljstyle'

You can format an entire buffer with :FormatCode.

  @clear
  % (defn x [] (cond nil 1 :else 2))<CR>
  |(defn y [] (cond nil 3 :else 4))

  :FormatCode cljstyle
  ! cljstyle .*
  $ (defn x
  $   []
  $   (cond nil 1
  $         :else 2))
  $ (defn y
  $   []
  $   (cond nil 3
  $         :else 4))
  (defn x
    []
    (cond nil 1
          :else 2))
  (defn y
    []
    (cond nil 3
          :else 4))
  @end

Formatting a specific line range is not supported.
